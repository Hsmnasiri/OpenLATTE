{"vulnerability": "CWE190_Integer_Overflow__char_fscanf_preinc_05", "functional_semantics": "The function reads a single character from standard input, increments its ASCII value by one, and then passes the result to another function for further processing.", "vulnerability_cause": "The root cause is a signed integer overflow. The variable `local_12` is a `char`, which is treated as a signed type. The vulnerable code increments this character's value without any boundary checks. If the input character has the maximum signed char value of 127 (`0x7f`), incrementing it causes it to wrap around to -128, leading to an integer overflow.", "fixing_solution": "The patch introduces a security check before the arithmetic operation. It explicitly checks if `local_12` is equal to `0x7f`. If the value is at this maximum, it prints an error message and avoids the increment, preventing the overflow. The increment operation is only performed if the input value is less than the maximum, ensuring the calculation is safe.", "bad_code": "\nvoid FUN_001013c9(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_00104010 != 0) {\n    local_12 = local_12 + '\\x01';\n    local_11 = local_12;\n    FUN_0010186b((int)local_12);\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\nvoid FUN_00101451(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_0010402c == 0) {\n    if (local_12 == '\\x7f') {\n      FUN_001016f1(\"data value is too large to perform arithmetic safely.\");\n    }\n    else {\n      local_12 = local_12 + '\\x01';\n      local_11 = local_12;\n      FUN_0010186b((int)local_12);\n    }\n  }\n  else {\n    FUN_001016f1(\"Benign, fixed string\");\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_02", "functional_semantics": "The function's purpose is to execute a shell command to list files. It constructs a command string starting with \"ls \" and then passes this string to `/bin/sh` for execution.", "vulnerability_cause": "The vulnerable function constructs a shell command by concatenating the static string \"ls \" with unsanitized data received from a network socket (`recv`). An attacker who can send data to the listening port can inject arbitrary shell metacharacters (e.g., ';', '|', '`') and execute arbitrary commands on the system, as the input is not validated or sanitized before being passed to `execl`.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication. Instead of receiving potentially malicious input from a socket, the patched function hardcodes a safe, static argument, \"*.*\", to be appended to the \"ls \" command. This ensures that the executed command is always \"ls *.*\" and cannot be influenced by external input, thereby eliminating the command injection vulnerability.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175a(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_03", "functional_semantics": "The function constructs a shell command string and executes it using `execl`. The command is intended to list files, starting with the base command \"ls \".", "vulnerability_cause": "The vulnerable function receives data from a network socket via `recv` and appends it directly to the command string \"ls \". This input is not sanitized or validated, allowing an attacker who can send data to the listening port (127.0.0.1:27015) to inject arbitrary shell commands. For example, sending `; rm -rf /` would result in the execution of `ls ; rm -rf /`.", "fixing_solution": "The patch completely removes the vulnerable code block responsible for network communication (`socket`, `connect`, `recv`). Instead of accepting user-controllable data from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the base command. This makes the final command static (`ls *.*`) and removes the vector for command injection, as external input is no longer used to construct the command.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175a(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_04", "functional_semantics": "The function constructs a shell command string and executes it using `execl`. The command is intended to list files, starting with the base command \"ls \".", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function connects to a local network socket (127.0.0.1:35207), receives data using `recv`, and appends this untrusted data directly to the command string \"ls \". This string is then executed by `/bin/sh`. An attacker who can control the data sent from the socket can inject arbitrary shell metacharacters (e.g., ';', '|', '`') and commands, leading to remote code execution.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication (`socket`, `connect`, `recv`). Instead of receiving data from an external source, the patched function appends a hardcoded, static string (\"*.*\") to the base command. This change makes the executed command static (`ls *.*`) and removes the ability for an attacker to inject malicious input, thus eliminating the command injection vulnerability.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103016,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\n/* WARNING: Removing unreachable block (ram,0x001017fa) */\n\nvoid FUN_00101767(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103016,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_05", "functional_semantics": "Both functions are designed to construct and execute a shell command. They initialize a command buffer with \"ls \" and then append additional arguments before passing the resulting string to `/bin/sh` for execution via `execl`.", "vulnerability_cause": "The root cause of the vulnerability is OS Command Injection. The vulnerable function receives data from a network socket and concatenates it directly into a command string that is later executed by the shell. There is no sanitization or validation of the network-received data, allowing an attacker who can send data to the listening socket (127.0.0.1:27015) to inject arbitrary shell commands (e.g., by sending `; rm -rf /`).", "fixing_solution": "The patch completely removes the vulnerable code path that reads from the network socket. Instead of appending untrusted network data, the patched function appends a hardcoded, benign string (\"*.*\") to the base command. This change ensures that the command executed by `execl` is always the static string \"ls *.*\", effectively eliminating the command injection vector by removing the source of untrusted input.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105024 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_06", "functional_semantics": "The function's purpose is to construct and execute a shell command. It initializes a command string with \"ls \" and appends arguments to it before passing the complete string to `/bin/sh` for execution.", "vulnerability_cause": "The vulnerability is a command injection. The vulnerable function connects to a network socket, reads data using `recv`, and appends this untrusted data directly to a command string (\"ls \"). This string is then executed by the shell via `execl`. An attacker controlling the network service can send malicious data containing shell metacharacters (e.g., ';', '|', '`') to execute arbitrary commands on the system.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication. Instead of reading data from a socket with `recv`, the patched function appends a hardcoded, safe string (\"*.*\") to the command. This ensures that the command executed is always the static string \"ls *.*\", eliminating the possibility of injecting malicious commands from an external source.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103012,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\n/* WARNING: Removing unreachable block (ram,0x001017fc) */\n\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103012,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_07", "functional_semantics": "Both functions construct a shell command string to be executed via `execl`. They start with the base command \"ls \" and are intended to append arguments before execution.", "vulnerability_cause": "The root cause is a command injection vulnerability. The vulnerable function connects to a local network socket (127.0.0.1:27015), receives data, and appends this untrusted data directly to the command string buffer (`local_78`). Because this input is not sanitized, an attacker who can send data to this socket can inject arbitrary shell metacharacters (e.g., ';', '&&', '|') to execute unintended commands.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the network communication logic (socket, connect, recv). Instead of appending untrusted data from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the command. This removes the injection point, ensuring that the executed command is always the benign \"ls *.*\" and cannot be influenced by external input.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 == 5) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101769(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 == 5) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0e(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_08", "functional_semantics": "The function constructs a shell command string in a local buffer, which is initialized with \"ls \". It then executes this command string using `execl` with `/bin/sh -c`. The intended purpose is to list files, with the arguments to `ls` being determined by subsequent logic.", "vulnerability_cause": "The vulnerable function establishes a network connection to localhost and receives data from a socket using `recv`. This externally received data is appended directly to the \"ls \" command string in the `local_78` buffer. Since this input is not sanitized, an attacker who can send data to the socket can inject arbitrary shell commands (e.g., \"; rm -rf /\"), which will be executed by `execl`. This is a classic command injection vulnerability.", "fixing_solution": "The patch completely removes the vulnerable code block that creates a socket, connects, and receives data from the network. Instead of appending untrusted network input, the patched function appends a hardcoded, safe string (\"*.*\") to the command buffer under certain conditions. By eliminating the ability to read data from an external, untrusted source into the command buffer, the patch removes the command injection vector entirely.", "bad_code": "\nvoid FUN_00101507(void)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  ssize_t sVar4;\n  char *pcVar5;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_001014e9();\n  if (iVar1 != 0) {\n    sVar3 = strlen(local_78);\n    iVar1 = socket(2,1,6);\n    if (iVar1 != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar2 = connect(iVar1,&local_88,0x10);\n      if (iVar2 != -1) {\n        sVar4 = recv(iVar1,local_78 + sVar3,99 - sVar3,0);\n        iVar2 = (int)sVar4;\n        if ((iVar2 != -1) && (iVar2 != 0)) {\n          local_78[(long)iVar2 + sVar3] = '\\0';\n          pcVar5 = strchr(local_78,0xd);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n          pcVar5 = strchr(local_78,10);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n        }\n      }\n    }\n    if (iVar1 != -1) {\n      close(iVar1);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010178a(void)\n\n{\n  int iVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_001014f8();\n  if (iVar1 == 0) {\n    sVar2 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar2,\"*.*\",4);\n  }\n  else {\n    FUN_00101a35(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_09", "functional_semantics": "The function constructs and executes a shell command. It is intended to list files by building a command string starting with \"ls \" and appending an argument, which is then executed via `execl` with `/bin/sh -c`.", "vulnerability_cause": "The vulnerable function constructs a shell command by concatenating the static string \"ls \" with unsanitized data received from a network socket (127.0.0.1:27015). An attacker who can control the data sent over this socket can inject arbitrary shell metacharacters (e.g., ';', '|', '`') and subsequent commands. These injected commands are then executed with the privileges of the running program via the `execl` call, leading to an OS Command Injection vulnerability.", "fixing_solution": "The patch completely removes the network communication logic (`socket`, `connect`, `recv`). Instead of reading command arguments from an untrusted network source, the patched function appends a hardcoded, safe string (\"*.*\") to the \"ls \" command. This ensures that the command executed by `execl` is always a static, non-malicious string (`ls *.*`), effectively eliminating the command injection vector.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030d4 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030d8 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_10", "functional_semantics": "Both functions are designed to construct and execute a shell command. They initialize a command buffer with \"ls \" and then append arguments before executing the final command string via `execl` with `/bin/sh -c`.", "vulnerability_cause": "The root cause of the vulnerability is that the vulnerable function appends unsanitized data received directly from a network socket to a command string. The function connects to localhost on port 27015, reads data using `recv`, and concatenates it with \"ls \". This allows a local or remote attacker who can send data to that port to inject arbitrary shell commands, which are then executed by `execl`.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the network communication logic (the `socket`, `connect`, and `recv` calls). Instead of appending untrusted data from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the command buffer. This ensures that the command passed to `execl` is always a static, non-malicious string, thus eliminating the command injection vector.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105020 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_11", "functional_semantics": "The function constructs a shell command string, which starts with \"ls \", and then executes it using `execl` with `/bin/sh -c`. The intention is to list files, with the arguments to `ls` being determined by the function's logic.", "vulnerability_cause": "The vulnerable function establishes a network connection to localhost (127.0.0.1) on port 27015 and receives data from it using `recv`. This externally received data is appended to the command string \"ls \" and subsequently executed by the shell. The sanitization performed (removing carriage return and newline characters) is insufficient to prevent shell command injection. An attacker who can send data to this port can inject shell metacharacters (e.g., ';', '|', '`', '$()') to execute arbitrary commands.", "fixing_solution": "The patch completely removes the vulnerable code block responsible for network communication and data reception (`socket`, `connect`, `recv`). Instead of reading potentially malicious input from a socket, the patched function conditionally appends a hardcoded, safe string (\"*.*\") to the command. This ensures that the argument passed to the shell is always a static, developer-controlled value, thereby eliminating the command injection vulnerability.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  ssize_t sVar4;\n  char *pcVar5;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_00101f2b();\n  if (iVar1 != 0) {\n    sVar3 = strlen(local_78);\n    iVar1 = socket(2,1,6);\n    if (iVar1 != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar2 = connect(iVar1,&local_88,0x10);\n      if (iVar2 != -1) {\n        sVar4 = recv(iVar1,local_78 + sVar3,99 - sVar3,0);\n        iVar2 = (int)sVar4;\n        if ((iVar2 != -1) && (iVar2 != 0)) {\n          local_78[(long)iVar2 + sVar3] = '\\0';\n          pcVar5 = strchr(local_78,0xd);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n          pcVar5 = strchr(local_78,10);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n        }\n      }\n    }\n    if (iVar1 != -1) {\n      close(iVar1);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010176c(void)\n\n{\n  int iVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_00101f3a();\n  if (iVar1 == 0) {\n    sVar2 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar2,\"*.*\",4);\n  }\n  else {\n    FUN_00101a17(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_13", "functional_semantics": "The function constructs a shell command string and executes it using `execl`. The command begins with \"ls \" and is intended to be followed by a file path or pattern to list directory contents.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function receives data from a network socket and appends it directly to the command string \"ls \". Since this network input is not sanitized or validated, an attacker can send a payload containing shell metacharacters (e.g., ';', '&&', '|') to execute arbitrary commands on the system.", "fixing_solution": "The patch completely removes the vulnerable code path that reads from a network socket. Instead of concatenating untrusted network data, the patched function appends a hardcoded, safe string (\"*.*\") to the base command. This change ensures that the command passed to `execl` is always static and cannot be controlled by an external attacker, thus eliminating the command injection vulnerability.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030dc == 5) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101769(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030dc == 5) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0e(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_14", "functional_semantics": "The function constructs a shell command string in a local buffer. Under a specific condition (a global variable being 5), it appends arguments to the base command \"ls \" and then executes the resulting string using `execl` with `/bin/sh -c`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function receives data from a network socket and directly appends this untrusted data to the command string buffer. Since this input is not sanitized, an attacker can send malicious shell metacharacters (e.g., ';', '&&', '`') to execute arbitrary commands on the system.", "fixing_solution": "The patch completely removes the networking code responsible for receiving untrusted data. Instead of reading from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the command buffer. This eliminates the injection vector by preventing any external, user-controlled input from being part of the command string passed to the shell for execution.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105014 == 5) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101769(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105014 == 5) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0e(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_15", "functional_semantics": "The function's purpose is to construct and execute a shell command. It initializes a command buffer with \"ls \", appends arguments to it, and then executes the resulting command string using `/bin/sh`.", "vulnerability_cause": "The vulnerable function receives data from a network socket and appends it directly to the command string. Although it attempts to sanitize the input by removing newline and carriage return characters, it fails to sanitize other shell metacharacters (like ';', '|', '`', '$'). This allows an attacker who can control the data sent over the socket to inject arbitrary commands, which will be executed by the `execl` call. This is a classic command injection vulnerability.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication. Instead of receiving data from a socket, the patched function hardcodes the argument \"*.*\" and appends it to the \"ls \" command. By eliminating the external, user-controllable input, the patch ensures that only the safe, predefined command \"ls *.*\" can be executed, thereby mitigating the command injection vulnerability.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175b(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_21", "functional_semantics": "Both functions are designed to execute a shell command. They initialize a local buffer, pass it to a helper function to be populated with a command string, and then execute that string via `execl(\"/bin/sh\", ...)`.", "vulnerability_cause": "The root cause of the vulnerability is not in the function shown, but is triggered by it. The vulnerable function sets a global variable, `DAT_0010501c`, to `1` before calling the helper function `FUN_001014e9`. This global variable likely acts as a flag that enables an insecure code path within the helper function, leading to a vulnerability such as a buffer overflow or command injection when populating the `local_78` buffer.", "fixing_solution": "The patch remediates the vulnerability by changing the value of the global flag. In the patched function, the corresponding global variable `DAT_00105020` is set to `0` instead of `1`. This change presumably signals the helper function `FUN_0010175c` to use a secure code path, thus preventing the underlying vulnerability from being exploited.", "bad_code": "\nvoid FUN_0010166c(void)\n\n{\n  undefined8 uVar1;\n  long in_FS_OFFSET;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined4 local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_78 = 0x20736c;\n  local_70 = 0;\n  local_68 = 0;\n  local_60 = 0;\n  local_58 = 0;\n  local_50 = 0;\n  local_48 = 0;\n  local_40 = 0;\n  local_38 = 0;\n  local_30 = 0;\n  local_28 = 0;\n  local_20 = 0;\n  local_18 = 0;\n  DAT_0010501c = 1;\n  uVar1 = FUN_001014e9(&local_78);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,uVar1,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\nvoid FUN_001017a9(void)\n\n{\n  undefined8 uVar1;\n  long in_FS_OFFSET;\n  undefined8 local_78;\n  undefined8 local_70;\n  undefined8 local_68;\n  undefined8 local_60;\n  undefined8 local_58;\n  undefined8 local_50;\n  undefined8 local_48;\n  undefined8 local_40;\n  undefined8 local_38;\n  undefined8 local_30;\n  undefined8 local_28;\n  undefined8 local_20;\n  undefined4 local_18;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_78 = 0x20736c;\n  local_70 = 0;\n  local_68 = 0;\n  local_60 = 0;\n  local_58 = 0;\n  local_50 = 0;\n  local_48 = 0;\n  local_40 = 0;\n  local_38 = 0;\n  local_30 = 0;\n  local_28 = 0;\n  local_20 = 0;\n  local_18 = 0;\n  DAT_00105020 = 0;\n  uVar1 = FUN_0010175c(&local_78);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,uVar1,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
