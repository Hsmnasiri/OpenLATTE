{"vulnerability": "CWE190_Integer_Overflow__char_fscanf_preinc_05", "functional_semantics": "The code's purpose is to read a single character from standard input, increment its integer value by one, and then print the resulting character's value as a two-digit hexadecimal number to the console.", "vulnerability_cause": "The vulnerability is a CWE-190 Integer Overflow. In the function `CWE190_Integer_Overflow__char_fscanf_preinc_05_bad`, data is read from standard input via `__isoc99_fscanf` into a `char` variable `local_12`. The program then directly performs an increment operation (`local_12 = local_12 + '\\x01'`). The vulnerability occurs because there is no validation to check if `local_12` already holds the maximum value for a signed char (127, or 0x7F). If a user inputs 127, the increment operation causes the value to wrap around to the minimum value (-128, or 0x80), which is an integer overflow. This overflowed value is then passed to `FUN_0010186b` and printed by `printf`.", "fixing_solution": "The patch mitigates the vulnerability by introducing a boundary check in the `goodB2G1` function before the increment operation. The code now includes the condition `if (local_12 == '\\x7f')`. This check explicitly verifies if the input character `local_12` is equal to the maximum value for a signed char (127). If it is, the unsafe increment is skipped, and an error message is printed. The increment operation and the call to `FUN_0010186b` are only performed if the input value is safely below the maximum limit, thus preventing the integer overflow from occurring.", "bad_code": "\nvoid FUN_001013c9(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_00104010 != 0) {\n    local_12 = local_12 + '\\x01';\n    local_11 = local_12;\n    FUN_0010186b((int)local_12);\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\nvoid FUN_00101451(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_0010402c == 0) {\n    if (local_12 == '\\x7f') {\n      FUN_001016f1(\"data value is too large to perform arithmetic safely.\");\n    }\n    else {\n      local_12 = local_12 + '\\x01';\n      local_11 = local_12;\n      FUN_0010186b((int)local_12);\n    }\n  }\n  else {\n    FUN_001016f1(\"Benign, fixed string\");\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_02", "functional_semantics": "The function's purpose is to construct and execute a shell command to list files. It initializes a buffer with \"ls \" and then appends arguments before passing the complete string to `/bin/sh` for execution.", "vulnerability_cause": "The vulnerability is a command injection. The vulnerable function connects to a network socket (127.0.0.1:27015) and appends data received via `recv()` directly into the command string buffer (`local_78`). Since this external input is not sanitized, an attacker can send malicious payloads (e.g., \"; rm -rf /\") which will be executed by `execl`, leading to arbitrary command execution.", "fixing_solution": "The patch completely removes the vulnerable networking logic. It eliminates the `socket`, `connect`, and `recv` calls, thereby removing the channel for external input. Instead of appending data from the network, the patched function appends a hardcoded, safe string (\"*.*\") to the command, effectively changing the executed command to a static \"ls *.*\" and preventing any injection.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175a(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_03", "functional_semantics": "The function's purpose is to construct and execute a shell command to list files. It initializes a command string with \"ls \" and then appends arguments to it before passing the complete string to `/bin/sh` for execution via `execl`.", "vulnerability_cause": "The root cause of the vulnerability is OS Command Injection. The vulnerable function receives data from a network socket via `recv` and directly appends this untrusted data to the command string \"ls \". There is no sanitization or validation of the received data, allowing an attacker who can send data to the listening port (127.0.0.1:27015) to inject arbitrary shell metacharacters (e.g., ';', '|', '&&') and execute any command on the system.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the code that reads data from the network socket. Instead of appending user-controllable input, the patched function appends a hardcoded, safe string \"*.*\" to the command. This change eliminates the injection vector by ensuring that the command executed by `execl` is static and cannot be influenced by external input.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175a(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_04", "functional_semantics": "The function constructs a shell command string and executes it using `/bin/sh -c`. The command is intended to list files using `ls` with an argument.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function receives untrusted data from a network socket (`recv`) and appends it directly to the command string \"ls \". This combined string is then executed by the shell, allowing a remote attacker to inject arbitrary shell commands by sending malicious data (e.g., `; rm -rf /`) to the listening port.", "fixing_solution": "The patch completely removes the networking functionality (socket creation, connection, and receiving data). Instead of appending untrusted network input, the patched code appends a hardcoded, static string \"*.*\" to the command. This eliminates the command injection vector by removing the ability for an external user to supply any part of the command string.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103016,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\n/* WARNING: Removing unreachable block (ram,0x001017fa) */\n\nvoid FUN_00101767(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103016,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_05", "functional_semantics": "Both functions are designed to construct and execute a shell command. They initialize a buffer with the command \"ls \" and then append arguments to it before executing the complete command string using `execl` with `/bin/sh -c`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function connects to a local network socket (127.0.0.1:27015), receives data using `recv`, and appends this data directly to the \"ls \" command string. This allows any process that can send data to that port to inject arbitrary shell commands (e.g., sending `; rm -rf /`), which are then executed by the `execl` call. The root cause is the failure to sanitize or validate externally-controlled data that is used to construct a system command.", "fixing_solution": "The patch completely removes the vulnerable functionality. The entire code block responsible for creating a socket, connecting, and receiving network data has been eliminated. Instead, the patched version appends a hardcoded, safe string (\"*.*\") to the command. This mitigates the vulnerability by removing the attack vector entirely, as no external or user-controlled input is ever incorporated into the command string that gets executed.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105024 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_06", "functional_semantics": "Both functions construct and execute a shell command using `execl`. The intended purpose is to run the `ls` command with an argument, which is then passed to `/bin/sh` for execution.", "vulnerability_cause": "The vulnerable function constructs a shell command by concatenating the static string \"ls \" with unsanitized data received directly from a network socket on TCP port 27015. This allows a remote attacker to inject arbitrary shell commands by sending a payload containing shell metacharacters (e.g., ';', '|', '`', '$()'). The function fails to validate or sanitize the network input, treating it as a trusted part of the command to be executed.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the networking code that reads user-controlled input. Instead of receiving a command argument from a socket, the patched function hardcodes the argument \"*.*\" and appends it to the \"ls \" string. This change eliminates the command injection vector by ensuring that no external input can influence the command that is ultimately executed.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103012,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n", "good_code": "\n/* WARNING: Removing unreachable block (ram,0x001017fc) */\n\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_00103012,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_07", "functional_semantics": "The function's purpose is to construct and execute a shell command. It initializes a command string with \"ls \" and, under certain conditions, appends additional arguments before passing the complete string to `/bin/sh` for execution.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function receives data from a network socket and appends it directly to the command string \"ls \". Since this network input is not sanitized, an attacker can send malicious shell metacharacters (e.g., ';', '|', '`') to execute arbitrary commands on the system.", "fixing_solution": "The patch completely removes the network communication logic (socket creation, connection, and data reception). Instead of appending untrusted data from the network, the patched function appends a hardcoded, safe string (\"*.*\") to the command. This eliminates the injection vector by ensuring that no external, user-controllable input is ever passed to the shell.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 == 5) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101769(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 == 5) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0e(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_08", "functional_semantics": "Both functions construct and execute a shell command to list files using `/bin/sh -c`. The command string is built in a local buffer, which is then passed as an argument to `execl`.", "vulnerability_cause": "The vulnerable function receives data from a network socket and appends it directly to the command string \"ls \". It fails to properly sanitize this external input, which is then passed to the shell for execution. This allows a remote attacker to inject arbitrary shell commands by sending a malicious payload (e.g., containing characters like ';', '|', '&', or '`') to the listening socket, leading to remote code execution.", "fixing_solution": "The patch completely removes the vulnerable code path that reads data from a network socket. The `socket`, `connect`, and `recv` calls are eliminated. Instead, the patched version appends a hardcoded, safe string (\"*.*\") to the command, ensuring that no user-controllable input can be used to manipulate the command executed by the shell. This change eradicates the command injection vulnerability by removing the source of untrusted data.", "bad_code": "\nvoid FUN_00101507(void)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  ssize_t sVar4;\n  char *pcVar5;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_001014e9();\n  if (iVar1 != 0) {\n    sVar3 = strlen(local_78);\n    iVar1 = socket(2,1,6);\n    if (iVar1 != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar2 = connect(iVar1,&local_88,0x10);\n      if (iVar2 != -1) {\n        sVar4 = recv(iVar1,local_78 + sVar3,99 - sVar3,0);\n        iVar2 = (int)sVar4;\n        if ((iVar2 != -1) && (iVar2 != 0)) {\n          local_78[(long)iVar2 + sVar3] = '\\0';\n          pcVar5 = strchr(local_78,0xd);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n          pcVar5 = strchr(local_78,10);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n        }\n      }\n    }\n    if (iVar1 != -1) {\n      close(iVar1);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010178a(void)\n\n{\n  int iVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_001014f8();\n  if (iVar1 == 0) {\n    sVar2 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar2,\"*.*\",4);\n  }\n  else {\n    FUN_00101a35(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_09", "functional_semantics": "The function constructs a shell command string in a local buffer, initially starting with \"ls \". It then appends a file or directory path to this string and executes the complete command using `execl` with `/bin/sh`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function opens a network socket, connects to localhost on port 27015, and reads data directly into the command buffer using `recv`. This network input is not sanitized or validated, allowing an attacker to send shell metacharacters (e.g., ';', '|', '`', '$()') which are then executed by `/bin/sh`, leading to arbitrary command execution.", "fixing_solution": "The patch completely removes the vulnerable networking code responsible for reading user input from a socket. Instead of appending untrusted network data, the patched function appends a hardcoded, safe string (\"*.*\") to the command buffer. This eliminates the command injection vector by ensuring that no external, user-controlled data can influence the command being executed.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030d4 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_001030d8 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_10", "functional_semantics": "Both functions are designed to execute a shell command to list files. They construct a command string, which is then passed to `/bin/sh` for execution via `execl`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function receives data from a network socket and concatenates this untrusted input directly into a command string that is later executed. There is no sanitization or validation of the received data, allowing an attacker who can send data to the listening port to inject and execute arbitrary shell commands.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the network functionality. Instead of reading potentially malicious data from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the base command. This ensures that the command executed is always a benign, developer-intended string, eliminating the possibility of command injection from an external source.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105010 != 0) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101768(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105020 == 0) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0b(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_11", "functional_semantics": "Both functions construct and execute a shell command. They initialize a buffer with the base command \"ls \" and then append an argument before passing the complete command string to `/bin/sh` for execution via `execl`.", "vulnerability_cause": "The root cause of the vulnerability is command injection. The vulnerable function receives data from a network socket using `recv` and appends this untrusted, unsanitized data directly to the command string \"ls \". An attacker can connect to the listening port and send malicious shell commands (e.g., \"; rm -rf /\") which will then be executed by the system.", "fixing_solution": "The patch mitigates the vulnerability by completely removing the networking logic. Instead of reading potentially malicious input from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the command. This eliminates the injection vector by ensuring that no external, user-controlled data can influence the command being executed.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int iVar1;\n  int iVar2;\n  size_t sVar3;\n  ssize_t sVar4;\n  char *pcVar5;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_00101f2b();\n  if (iVar1 != 0) {\n    sVar3 = strlen(local_78);\n    iVar1 = socket(2,1,6);\n    if (iVar1 != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar2 = connect(iVar1,&local_88,0x10);\n      if (iVar2 != -1) {\n        sVar4 = recv(iVar1,local_78 + sVar3,99 - sVar3,0);\n        iVar2 = (int)sVar4;\n        if ((iVar2 != -1) && (iVar2 != 0)) {\n          local_78[(long)iVar2 + sVar3] = '\\0';\n          pcVar5 = strchr(local_78,0xd);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n          pcVar5 = strchr(local_78,10);\n          if (pcVar5 != (char *)0x0) {\n            *pcVar5 = '\\0';\n          }\n        }\n      }\n    }\n    if (iVar1 != -1) {\n      close(iVar1);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010176c(void)\n\n{\n  int iVar1;\n  size_t sVar2;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  iVar1 = FUN_00101f3a();\n  if (iVar1 == 0) {\n    sVar2 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar2,\"*.*\",4);\n  }\n  else {\n    FUN_00101a17(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_14", "functional_semantics": "The function's purpose is to construct and execute a shell command. It initializes a command string with \"ls \" and then appends additional arguments before passing the complete string to `/bin/sh` for execution via `execl`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function opens a network socket, receives data from a remote source, and directly concatenates this unsanitized data into the command string that is later executed. An attacker who can send data to the listening socket can inject arbitrary shell commands (e.g., by sending `; rm -rf /`) which will be executed with the privileges of the running program.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication. Instead of receiving data from a socket, the patched function appends a hardcoded, safe string (\"*.*\") to the base command. This eliminates the command injection vulnerability by removing the external input vector entirely, ensuring that only a predefined, safe command can be executed.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105014 == 5) {\n    sVar2 = strlen(local_78);\n    __fd = socket(2,1,6);\n    if (__fd != -1) {\n      memset(&local_88,0,0x10);\n      local_88.sa_family = 2;\n      local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n      local_88.sa_data._0_2_ = htons(0x6987);\n      iVar1 = connect(__fd,&local_88,0x10);\n      if (iVar1 != -1) {\n        sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n        iVar1 = (int)sVar3;\n        if ((iVar1 != -1) && (iVar1 != 0)) {\n          local_78[(long)iVar1 + sVar2] = '\\0';\n          pcVar4 = strchr(local_78,0xd);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n          pcVar4 = strchr(local_78,10);\n          if (pcVar4 != (char *)0x0) {\n            *pcVar4 = '\\0';\n          }\n        }\n      }\n    }\n    if (__fd != -1) {\n      close(__fd);\n    }\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_00101769(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  if (DAT_00105014 == 5) {\n    sVar1 = strlen(local_78);\n    builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  }\n  else {\n    FUN_00101a0e(\"Benign, fixed string\");\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
{"vulnerability": "CWE78_OS_Command_Injection__char_connect_socket_execl_15", "functional_semantics": "The function's purpose is to construct and execute a shell command. It initializes a command string with \"ls \" and then appends arguments to it before executing the complete command via `/bin/sh`.", "vulnerability_cause": "The vulnerability is a classic command injection. The vulnerable function connects to a network socket, receives data using `recv`, and appends this untrusted data directly to the command string \"ls \". This allows a malicious actor controlling the network source to inject arbitrary shell commands (e.g., by sending \"; rm -rf /\") which are then executed by the `execl` call.", "fixing_solution": "The patch completely removes the vulnerable code path that involves network communication. Instead of receiving command arguments from a socket, the patched function hardcodes a safe argument, \"*.*\", and appends it to the base command. By eliminating the use of external, untrusted input in the command string construction, the command injection vulnerability is fully mitigated.", "bad_code": "\nvoid FUN_001014e9(void)\n\n{\n  int __fd;\n  int iVar1;\n  size_t sVar2;\n  ssize_t sVar3;\n  char *pcVar4;\n  long in_FS_OFFSET;\n  sockaddr local_88;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar2 = strlen(local_78);\n  __fd = socket(2,1,6);\n  if (__fd != -1) {\n    memset(&local_88,0,0x10);\n    local_88.sa_family = 2;\n    local_88.sa_data._2_4_ = inet_addr(\"127.0.0.1\");\n    local_88.sa_data._0_2_ = htons(0x6987);\n    iVar1 = connect(__fd,&local_88,0x10);\n    if (iVar1 != -1) {\n      sVar3 = recv(__fd,local_78 + sVar2,99 - sVar2,0);\n      iVar1 = (int)sVar3;\n      if ((iVar1 != -1) && (iVar1 != 0)) {\n        local_78[(long)iVar1 + sVar2] = '\\0';\n        pcVar4 = strchr(local_78,0xd);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n        pcVar4 = strchr(local_78,10);\n        if (pcVar4 != (char *)0x0) {\n          *pcVar4 = '\\0';\n        }\n      }\n    }\n  }\n  if (__fd != -1) {\n    close(__fd);\n  }\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 == *(long *)(in_FS_OFFSET + 0x28)) {\n    return;\n  }\n                    /* WARNING: Subroutine does not return */\n  __stack_chk_fail();\n}\n\n", "good_code": "\nvoid FUN_0010175b(void)\n\n{\n  size_t sVar1;\n  long in_FS_OFFSET;\n  char local_78 [104];\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  builtin_strncpy(local_78,\"ls \",4);\n  local_78[4] = '\\0';\n  local_78[5] = '\\0';\n  local_78[6] = '\\0';\n  local_78[7] = '\\0';\n  local_78[8] = '\\0';\n  local_78[9] = '\\0';\n  local_78[10] = '\\0';\n  local_78[0xb] = '\\0';\n  local_78[0xc] = '\\0';\n  local_78[0xd] = '\\0';\n  local_78[0xe] = '\\0';\n  local_78[0xf] = '\\0';\n  local_78[0x10] = '\\0';\n  local_78[0x11] = '\\0';\n  local_78[0x12] = '\\0';\n  local_78[0x13] = '\\0';\n  local_78[0x14] = '\\0';\n  local_78[0x15] = '\\0';\n  local_78[0x16] = '\\0';\n  local_78[0x17] = '\\0';\n  local_78[0x18] = '\\0';\n  local_78[0x19] = '\\0';\n  local_78[0x1a] = '\\0';\n  local_78[0x1b] = '\\0';\n  local_78[0x1c] = '\\0';\n  local_78[0x1d] = '\\0';\n  local_78[0x1e] = '\\0';\n  local_78[0x1f] = '\\0';\n  local_78[0x20] = '\\0';\n  local_78[0x21] = '\\0';\n  local_78[0x22] = '\\0';\n  local_78[0x23] = '\\0';\n  local_78[0x24] = '\\0';\n  local_78[0x25] = '\\0';\n  local_78[0x26] = '\\0';\n  local_78[0x27] = '\\0';\n  local_78[0x28] = '\\0';\n  local_78[0x29] = '\\0';\n  local_78[0x2a] = '\\0';\n  local_78[0x2b] = '\\0';\n  local_78[0x2c] = '\\0';\n  local_78[0x2d] = '\\0';\n  local_78[0x2e] = '\\0';\n  local_78[0x2f] = '\\0';\n  local_78[0x30] = '\\0';\n  local_78[0x31] = '\\0';\n  local_78[0x32] = '\\0';\n  local_78[0x33] = '\\0';\n  local_78[0x34] = '\\0';\n  local_78[0x35] = '\\0';\n  local_78[0x36] = '\\0';\n  local_78[0x37] = '\\0';\n  local_78[0x38] = '\\0';\n  local_78[0x39] = '\\0';\n  local_78[0x3a] = '\\0';\n  local_78[0x3b] = '\\0';\n  local_78[0x3c] = '\\0';\n  local_78[0x3d] = '\\0';\n  local_78[0x3e] = '\\0';\n  local_78[0x3f] = '\\0';\n  local_78[0x40] = '\\0';\n  local_78[0x41] = '\\0';\n  local_78[0x42] = '\\0';\n  local_78[0x43] = '\\0';\n  local_78[0x44] = '\\0';\n  local_78[0x45] = '\\0';\n  local_78[0x46] = '\\0';\n  local_78[0x47] = '\\0';\n  local_78[0x48] = '\\0';\n  local_78[0x49] = '\\0';\n  local_78[0x4a] = '\\0';\n  local_78[0x4b] = '\\0';\n  local_78[0x4c] = '\\0';\n  local_78[0x4d] = '\\0';\n  local_78[0x4e] = '\\0';\n  local_78[0x4f] = '\\0';\n  local_78[0x50] = '\\0';\n  local_78[0x51] = '\\0';\n  local_78[0x52] = '\\0';\n  local_78[0x53] = '\\0';\n  local_78[0x54] = '\\0';\n  local_78[0x55] = '\\0';\n  local_78[0x56] = '\\0';\n  local_78[0x57] = '\\0';\n  local_78[0x58] = '\\0';\n  local_78[0x59] = '\\0';\n  local_78[0x5a] = '\\0';\n  local_78[0x5b] = '\\0';\n  local_78[0x5c] = '\\0';\n  local_78[0x5d] = '\\0';\n  local_78[0x5e] = '\\0';\n  local_78[0x5f] = '\\0';\n  local_78[0x60] = '\\0';\n  local_78[0x61] = '\\0';\n  local_78[0x62] = '\\0';\n  local_78[99] = '\\0';\n  sVar1 = strlen(local_78);\n  builtin_strncpy(local_78 + sVar1,\"*.*\",4);\n  execl(\"/bin/sh\",\"/bin/sh\",&DAT_0010300e,local_78,0);\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"}
