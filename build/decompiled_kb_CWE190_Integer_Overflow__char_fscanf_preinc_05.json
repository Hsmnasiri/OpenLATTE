{
  "CWE190_Integer_Overflow__char_fscanf_preinc_05_bad": {
    "stripped_name": "FUN_001013c9",
    "address": "001013c9",
    "decompiled_code": "\nvoid FUN_001013c9(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_00104010 != 0) {\n    local_12 = local_12 + '\\x01';\n    local_11 = local_12;\n    FUN_0010186b((int)local_12);\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"
  },
  "goodB2G1": {
    "stripped_name": "FUN_00101451",
    "address": "00101451",
    "decompiled_code": "\nvoid FUN_00101451(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_0010402c == 0) {\n    if (local_12 == '\\x7f') {\n      FUN_001016f1(\"data value is too large to perform arithmetic safely.\");\n    }\n    else {\n      local_12 = local_12 + '\\x01';\n      local_11 = local_12;\n      FUN_0010186b((int)local_12);\n    }\n  }\n  else {\n    FUN_001016f1(\"Benign, fixed string\");\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"
  },
  "goodB2G2": {
    "stripped_name": "FUN_00101503",
    "address": "00101503",
    "decompiled_code": "\nvoid FUN_00101503(void)\n\n{\n  long in_FS_OFFSET;\n  char local_12;\n  char local_11;\n  long local_10;\n  \n  local_10 = *(long *)(in_FS_OFFSET + 0x28);\n  local_12 = ' ';\n  if (DAT_00104010 != 0) {\n    __isoc99_fscanf(stdin,&DAT_00102008,&local_12);\n  }\n  if (DAT_00104010 != 0) {\n    if (local_12 == '\\x7f') {\n      FUN_001016f1(\"data value is too large to perform arithmetic safely.\");\n    }\n    else {\n      local_12 = local_12 + '\\x01';\n      local_11 = local_12;\n      FUN_0010186b((int)local_12);\n    }\n  }\n  if (local_10 != *(long *)(in_FS_OFFSET + 0x28)) {\n                    /* WARNING: Subroutine does not return */\n    __stack_chk_fail();\n  }\n  return;\n}\n\n"
  },
  "goodG2B1": {
    "stripped_name": "FUN_001015a4",
    "address": "001015a4",
    "decompiled_code": "\nvoid FUN_001015a4(void)\n\n{\n  char local_a;\n  \n  local_a = ' ';\n  if (DAT_0010402c == 0) {\n    local_a = '\\x02';\n  }\n  else {\n    FUN_001016f1(\"Benign, fixed string\");\n  }\n  if (DAT_00104010 != 0) {\n    FUN_0010186b(local_a + '\\x01');\n  }\n  return;\n}\n\n"
  },
  "goodG2B2": {
    "stripped_name": "FUN_001015fc",
    "address": "001015fc",
    "decompiled_code": "\nvoid FUN_001015fc(void)\n\n{\n  if (DAT_00104010 != 0) {\n    FUN_0010186b(3);\n  }\n  return;\n}\n\n"
  }
}